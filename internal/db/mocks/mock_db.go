// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/bnema/dumber/internal/db"
	gomock "github.com/golang/mock/gomock"
)

// MockZoomQuerier is a mock of ZoomQuerier interface.
type MockZoomQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockZoomQuerierMockRecorder
}

// MockZoomQuerierMockRecorder is the mock recorder for MockZoomQuerier.
type MockZoomQuerierMockRecorder struct {
	mock *MockZoomQuerier
}

// NewMockZoomQuerier creates a new mock instance.
func NewMockZoomQuerier(ctrl *gomock.Controller) *MockZoomQuerier {
	mock := &MockZoomQuerier{ctrl: ctrl}
	mock.recorder = &MockZoomQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZoomQuerier) EXPECT() *MockZoomQuerierMockRecorder {
	return m.recorder
}

// DeleteZoomLevel mocks base method.
func (m *MockZoomQuerier) DeleteZoomLevel(ctx context.Context, domain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteZoomLevel", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteZoomLevel indicates an expected call of DeleteZoomLevel.
func (mr *MockZoomQuerierMockRecorder) DeleteZoomLevel(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteZoomLevel", reflect.TypeOf((*MockZoomQuerier)(nil).DeleteZoomLevel), ctx, domain)
}

// GetZoomLevel mocks base method.
func (m *MockZoomQuerier) GetZoomLevel(ctx context.Context, domain string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoomLevel", ctx, domain)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoomLevel indicates an expected call of GetZoomLevel.
func (mr *MockZoomQuerierMockRecorder) GetZoomLevel(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoomLevel", reflect.TypeOf((*MockZoomQuerier)(nil).GetZoomLevel), ctx, domain)
}

// SetZoomLevel mocks base method.
func (m *MockZoomQuerier) SetZoomLevel(ctx context.Context, domain string, zoomLevel float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetZoomLevel", ctx, domain, zoomLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetZoomLevel indicates an expected call of SetZoomLevel.
func (mr *MockZoomQuerierMockRecorder) SetZoomLevel(ctx, domain, zoomLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZoomLevel", reflect.TypeOf((*MockZoomQuerier)(nil).SetZoomLevel), ctx, domain, zoomLevel)
}

// MockHistoryQuerier is a mock of HistoryQuerier interface.
type MockHistoryQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryQuerierMockRecorder
}

// MockHistoryQuerierMockRecorder is the mock recorder for MockHistoryQuerier.
type MockHistoryQuerierMockRecorder struct {
	mock *MockHistoryQuerier
}

// NewMockHistoryQuerier creates a new mock instance.
func NewMockHistoryQuerier(ctrl *gomock.Controller) *MockHistoryQuerier {
	mock := &MockHistoryQuerier{ctrl: ctrl}
	mock.recorder = &MockHistoryQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryQuerier) EXPECT() *MockHistoryQuerierMockRecorder {
	return m.recorder
}

// AddOrUpdateHistory mocks base method.
func (m *MockHistoryQuerier) AddOrUpdateHistory(ctx context.Context, url string, title sql.NullString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateHistory", ctx, url, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateHistory indicates an expected call of AddOrUpdateHistory.
func (mr *MockHistoryQuerierMockRecorder) AddOrUpdateHistory(ctx, url, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateHistory", reflect.TypeOf((*MockHistoryQuerier)(nil).AddOrUpdateHistory), ctx, url, title)
}

// GetHistory mocks base method.
func (m *MockHistoryQuerier) GetHistory(ctx context.Context, limit int64) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", ctx, limit)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockHistoryQuerierMockRecorder) GetHistory(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockHistoryQuerier)(nil).GetHistory), ctx, limit)
}

// SearchHistory mocks base method.
func (m *MockHistoryQuerier) SearchHistory(ctx context.Context, column1, column2 sql.NullString, limit int64) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchHistory", ctx, column1, column2, limit)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchHistory indicates an expected call of SearchHistory.
func (mr *MockHistoryQuerierMockRecorder) SearchHistory(ctx, column1, column2, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchHistory", reflect.TypeOf((*MockHistoryQuerier)(nil).SearchHistory), ctx, column1, column2, limit)
}

// MockShortcutQuerier is a mock of ShortcutQuerier interface.
type MockShortcutQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockShortcutQuerierMockRecorder
}

// MockShortcutQuerierMockRecorder is the mock recorder for MockShortcutQuerier.
type MockShortcutQuerierMockRecorder struct {
	mock *MockShortcutQuerier
}

// NewMockShortcutQuerier creates a new mock instance.
func NewMockShortcutQuerier(ctrl *gomock.Controller) *MockShortcutQuerier {
	mock := &MockShortcutQuerier{ctrl: ctrl}
	mock.recorder = &MockShortcutQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortcutQuerier) EXPECT() *MockShortcutQuerierMockRecorder {
	return m.recorder
}

// GetShortcuts mocks base method.
func (m *MockShortcutQuerier) GetShortcuts(ctx context.Context) ([]db.Shortcut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortcuts", ctx)
	ret0, _ := ret[0].([]db.Shortcut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortcuts indicates an expected call of GetShortcuts.
func (mr *MockShortcutQuerierMockRecorder) GetShortcuts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortcuts", reflect.TypeOf((*MockShortcutQuerier)(nil).GetShortcuts), ctx)
}

// MockDatabaseQuerier is a mock of DatabaseQuerier interface.
type MockDatabaseQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseQuerierMockRecorder
}

// MockDatabaseQuerierMockRecorder is the mock recorder for MockDatabaseQuerier.
type MockDatabaseQuerierMockRecorder struct {
	mock *MockDatabaseQuerier
}

// NewMockDatabaseQuerier creates a new mock instance.
func NewMockDatabaseQuerier(ctrl *gomock.Controller) *MockDatabaseQuerier {
	mock := &MockDatabaseQuerier{ctrl: ctrl}
	mock.recorder = &MockDatabaseQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseQuerier) EXPECT() *MockDatabaseQuerierMockRecorder {
	return m.recorder
}

// AddOrUpdateHistory mocks base method.
func (m *MockDatabaseQuerier) AddOrUpdateHistory(ctx context.Context, url string, title sql.NullString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateHistory", ctx, url, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateHistory indicates an expected call of AddOrUpdateHistory.
func (mr *MockDatabaseQuerierMockRecorder) AddOrUpdateHistory(ctx, url, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateHistory", reflect.TypeOf((*MockDatabaseQuerier)(nil).AddOrUpdateHistory), ctx, url, title)
}

// DeleteZoomLevel mocks base method.
func (m *MockDatabaseQuerier) DeleteZoomLevel(ctx context.Context, domain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteZoomLevel", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteZoomLevel indicates an expected call of DeleteZoomLevel.
func (mr *MockDatabaseQuerierMockRecorder) DeleteZoomLevel(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteZoomLevel", reflect.TypeOf((*MockDatabaseQuerier)(nil).DeleteZoomLevel), ctx, domain)
}

// GetHistory mocks base method.
func (m *MockDatabaseQuerier) GetHistory(ctx context.Context, limit int64) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", ctx, limit)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockDatabaseQuerierMockRecorder) GetHistory(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockDatabaseQuerier)(nil).GetHistory), ctx, limit)
}

// GetShortcuts mocks base method.
func (m *MockDatabaseQuerier) GetShortcuts(ctx context.Context) ([]db.Shortcut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortcuts", ctx)
	ret0, _ := ret[0].([]db.Shortcut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortcuts indicates an expected call of GetShortcuts.
func (mr *MockDatabaseQuerierMockRecorder) GetShortcuts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortcuts", reflect.TypeOf((*MockDatabaseQuerier)(nil).GetShortcuts), ctx)
}

// GetZoomLevel mocks base method.
func (m *MockDatabaseQuerier) GetZoomLevel(ctx context.Context, domain string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoomLevel", ctx, domain)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoomLevel indicates an expected call of GetZoomLevel.
func (mr *MockDatabaseQuerierMockRecorder) GetZoomLevel(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoomLevel", reflect.TypeOf((*MockDatabaseQuerier)(nil).GetZoomLevel), ctx, domain)
}

// SearchHistory mocks base method.
func (m *MockDatabaseQuerier) SearchHistory(ctx context.Context, column1, column2 sql.NullString, limit int64) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchHistory", ctx, column1, column2, limit)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchHistory indicates an expected call of SearchHistory.
func (mr *MockDatabaseQuerierMockRecorder) SearchHistory(ctx, column1, column2, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchHistory", reflect.TypeOf((*MockDatabaseQuerier)(nil).SearchHistory), ctx, column1, column2, limit)
}

// SetZoomLevel mocks base method.
func (m *MockDatabaseQuerier) SetZoomLevel(ctx context.Context, domain string, zoomLevel float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetZoomLevel", ctx, domain, zoomLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetZoomLevel indicates an expected call of SetZoomLevel.
func (mr *MockDatabaseQuerierMockRecorder) SetZoomLevel(ctx, domain, zoomLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZoomLevel", reflect.TypeOf((*MockDatabaseQuerier)(nil).SetZoomLevel), ctx, domain, zoomLevel)
}

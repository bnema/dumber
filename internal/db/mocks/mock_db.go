// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock_db.go
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/bnema/dumber/internal/db"
	gomock "go.uber.org/mock/gomock"
)

// MockZoomQuerier is a mock of ZoomQuerier interface.
type MockZoomQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockZoomQuerierMockRecorder
	isgomock struct{}
}

// MockZoomQuerierMockRecorder is the mock recorder for MockZoomQuerier.
type MockZoomQuerierMockRecorder struct {
	mock *MockZoomQuerier
}

// NewMockZoomQuerier creates a new mock instance.
func NewMockZoomQuerier(ctrl *gomock.Controller) *MockZoomQuerier {
	mock := &MockZoomQuerier{ctrl: ctrl}
	mock.recorder = &MockZoomQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZoomQuerier) EXPECT() *MockZoomQuerierMockRecorder {
	return m.recorder
}

// DeleteZoomLevel mocks base method.
func (m *MockZoomQuerier) DeleteZoomLevel(ctx context.Context, domain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteZoomLevel", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteZoomLevel indicates an expected call of DeleteZoomLevel.
func (mr *MockZoomQuerierMockRecorder) DeleteZoomLevel(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteZoomLevel", reflect.TypeOf((*MockZoomQuerier)(nil).DeleteZoomLevel), ctx, domain)
}

// GetZoomLevel mocks base method.
func (m *MockZoomQuerier) GetZoomLevel(ctx context.Context, domain string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoomLevel", ctx, domain)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoomLevel indicates an expected call of GetZoomLevel.
func (mr *MockZoomQuerierMockRecorder) GetZoomLevel(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoomLevel", reflect.TypeOf((*MockZoomQuerier)(nil).GetZoomLevel), ctx, domain)
}

// ListZoomLevels mocks base method.
func (m *MockZoomQuerier) ListZoomLevels(ctx context.Context) ([]db.ZoomLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListZoomLevels", ctx)
	ret0, _ := ret[0].([]db.ZoomLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListZoomLevels indicates an expected call of ListZoomLevels.
func (mr *MockZoomQuerierMockRecorder) ListZoomLevels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListZoomLevels", reflect.TypeOf((*MockZoomQuerier)(nil).ListZoomLevels), ctx)
}

// SetZoomLevel mocks base method.
func (m *MockZoomQuerier) SetZoomLevel(ctx context.Context, domain string, zoomLevel float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetZoomLevel", ctx, domain, zoomLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetZoomLevel indicates an expected call of SetZoomLevel.
func (mr *MockZoomQuerierMockRecorder) SetZoomLevel(ctx, domain, zoomLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZoomLevel", reflect.TypeOf((*MockZoomQuerier)(nil).SetZoomLevel), ctx, domain, zoomLevel)
}

// MockHistoryQuerier is a mock of HistoryQuerier interface.
type MockHistoryQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryQuerierMockRecorder
	isgomock struct{}
}

// MockHistoryQuerierMockRecorder is the mock recorder for MockHistoryQuerier.
type MockHistoryQuerierMockRecorder struct {
	mock *MockHistoryQuerier
}

// NewMockHistoryQuerier creates a new mock instance.
func NewMockHistoryQuerier(ctrl *gomock.Controller) *MockHistoryQuerier {
	mock := &MockHistoryQuerier{ctrl: ctrl}
	mock.recorder = &MockHistoryQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryQuerier) EXPECT() *MockHistoryQuerierMockRecorder {
	return m.recorder
}

// AddOrUpdateHistory mocks base method.
func (m *MockHistoryQuerier) AddOrUpdateHistory(ctx context.Context, url string, title sql.NullString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateHistory", ctx, url, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateHistory indicates an expected call of AddOrUpdateHistory.
func (mr *MockHistoryQuerierMockRecorder) AddOrUpdateHistory(ctx, url, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateHistory", reflect.TypeOf((*MockHistoryQuerier)(nil).AddOrUpdateHistory), ctx, url, title)
}

// DeleteHistory mocks base method.
func (m *MockHistoryQuerier) DeleteHistory(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHistory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHistory indicates an expected call of DeleteHistory.
func (mr *MockHistoryQuerierMockRecorder) DeleteHistory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistory", reflect.TypeOf((*MockHistoryQuerier)(nil).DeleteHistory), ctx, id)
}

// GetHistory mocks base method.
func (m *MockHistoryQuerier) GetHistory(ctx context.Context, limit int64) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", ctx, limit)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockHistoryQuerierMockRecorder) GetHistory(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockHistoryQuerier)(nil).GetHistory), ctx, limit)
}

// GetHistoryEntry mocks base method.
func (m *MockHistoryQuerier) GetHistoryEntry(ctx context.Context, url string) (db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryEntry", ctx, url)
	ret0, _ := ret[0].(db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryEntry indicates an expected call of GetHistoryEntry.
func (mr *MockHistoryQuerierMockRecorder) GetHistoryEntry(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryEntry", reflect.TypeOf((*MockHistoryQuerier)(nil).GetHistoryEntry), ctx, url)
}

// GetHistoryWithOffset mocks base method.
func (m *MockHistoryQuerier) GetHistoryWithOffset(ctx context.Context, limit, offset int64) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryWithOffset", ctx, limit, offset)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryWithOffset indicates an expected call of GetHistoryWithOffset.
func (mr *MockHistoryQuerierMockRecorder) GetHistoryWithOffset(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryWithOffset", reflect.TypeOf((*MockHistoryQuerier)(nil).GetHistoryWithOffset), ctx, limit, offset)
}

// SearchHistory mocks base method.
func (m *MockHistoryQuerier) SearchHistory(ctx context.Context, column1, column2 sql.NullString, limit int64) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchHistory", ctx, column1, column2, limit)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchHistory indicates an expected call of SearchHistory.
func (mr *MockHistoryQuerierMockRecorder) SearchHistory(ctx, column1, column2, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchHistory", reflect.TypeOf((*MockHistoryQuerier)(nil).SearchHistory), ctx, column1, column2, limit)
}

// UpdateHistoryFavicon mocks base method.
func (m *MockHistoryQuerier) UpdateHistoryFavicon(ctx context.Context, faviconUrl sql.NullString, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHistoryFavicon", ctx, faviconUrl, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHistoryFavicon indicates an expected call of UpdateHistoryFavicon.
func (mr *MockHistoryQuerierMockRecorder) UpdateHistoryFavicon(ctx, faviconUrl, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHistoryFavicon", reflect.TypeOf((*MockHistoryQuerier)(nil).UpdateHistoryFavicon), ctx, faviconUrl, url)
}

// MockCertificateQuerier is a mock of CertificateQuerier interface.
type MockCertificateQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateQuerierMockRecorder
	isgomock struct{}
}

// MockCertificateQuerierMockRecorder is the mock recorder for MockCertificateQuerier.
type MockCertificateQuerierMockRecorder struct {
	mock *MockCertificateQuerier
}

// NewMockCertificateQuerier creates a new mock instance.
func NewMockCertificateQuerier(ctrl *gomock.Controller) *MockCertificateQuerier {
	mock := &MockCertificateQuerier{ctrl: ctrl}
	mock.recorder = &MockCertificateQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateQuerier) EXPECT() *MockCertificateQuerierMockRecorder {
	return m.recorder
}

// DeleteCertificateValidation mocks base method.
func (m *MockCertificateQuerier) DeleteCertificateValidation(ctx context.Context, hostname, certificateHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateValidation", ctx, hostname, certificateHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateValidation indicates an expected call of DeleteCertificateValidation.
func (mr *MockCertificateQuerierMockRecorder) DeleteCertificateValidation(ctx, hostname, certificateHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateValidation", reflect.TypeOf((*MockCertificateQuerier)(nil).DeleteCertificateValidation), ctx, hostname, certificateHash)
}

// DeleteExpiredCertificateValidations mocks base method.
func (m *MockCertificateQuerier) DeleteExpiredCertificateValidations(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredCertificateValidations", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredCertificateValidations indicates an expected call of DeleteExpiredCertificateValidations.
func (mr *MockCertificateQuerierMockRecorder) DeleteExpiredCertificateValidations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredCertificateValidations", reflect.TypeOf((*MockCertificateQuerier)(nil).DeleteExpiredCertificateValidations), ctx)
}

// GetCertificateValidation mocks base method.
func (m *MockCertificateQuerier) GetCertificateValidation(ctx context.Context, hostname, certificateHash string) (db.CertificateValidation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateValidation", ctx, hostname, certificateHash)
	ret0, _ := ret[0].(db.CertificateValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateValidation indicates an expected call of GetCertificateValidation.
func (mr *MockCertificateQuerierMockRecorder) GetCertificateValidation(ctx, hostname, certificateHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateValidation", reflect.TypeOf((*MockCertificateQuerier)(nil).GetCertificateValidation), ctx, hostname, certificateHash)
}

// GetCertificateValidationByHostname mocks base method.
func (m *MockCertificateQuerier) GetCertificateValidationByHostname(ctx context.Context, hostname string) (db.CertificateValidation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateValidationByHostname", ctx, hostname)
	ret0, _ := ret[0].(db.CertificateValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateValidationByHostname indicates an expected call of GetCertificateValidationByHostname.
func (mr *MockCertificateQuerierMockRecorder) GetCertificateValidationByHostname(ctx, hostname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateValidationByHostname", reflect.TypeOf((*MockCertificateQuerier)(nil).GetCertificateValidationByHostname), ctx, hostname)
}

// ListCertificateValidations mocks base method.
func (m *MockCertificateQuerier) ListCertificateValidations(ctx context.Context) ([]db.CertificateValidation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificateValidations", ctx)
	ret0, _ := ret[0].([]db.CertificateValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateValidations indicates an expected call of ListCertificateValidations.
func (mr *MockCertificateQuerierMockRecorder) ListCertificateValidations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateValidations", reflect.TypeOf((*MockCertificateQuerier)(nil).ListCertificateValidations), ctx)
}

// StoreCertificateValidation mocks base method.
func (m *MockCertificateQuerier) StoreCertificateValidation(ctx context.Context, hostname, certificateHash, userDecision string, expiresAt sql.NullTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCertificateValidation", ctx, hostname, certificateHash, userDecision, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCertificateValidation indicates an expected call of StoreCertificateValidation.
func (mr *MockCertificateQuerierMockRecorder) StoreCertificateValidation(ctx, hostname, certificateHash, userDecision, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCertificateValidation", reflect.TypeOf((*MockCertificateQuerier)(nil).StoreCertificateValidation), ctx, hostname, certificateHash, userDecision, expiresAt)
}

// MockDatabaseQuerier is a mock of DatabaseQuerier interface.
type MockDatabaseQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseQuerierMockRecorder
	isgomock struct{}
}

// MockDatabaseQuerierMockRecorder is the mock recorder for MockDatabaseQuerier.
type MockDatabaseQuerierMockRecorder struct {
	mock *MockDatabaseQuerier
}

// NewMockDatabaseQuerier creates a new mock instance.
func NewMockDatabaseQuerier(ctrl *gomock.Controller) *MockDatabaseQuerier {
	mock := &MockDatabaseQuerier{ctrl: ctrl}
	mock.recorder = &MockDatabaseQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseQuerier) EXPECT() *MockDatabaseQuerierMockRecorder {
	return m.recorder
}

// AddOrUpdateHistory mocks base method.
func (m *MockDatabaseQuerier) AddOrUpdateHistory(ctx context.Context, url string, title sql.NullString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateHistory", ctx, url, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateHistory indicates an expected call of AddOrUpdateHistory.
func (mr *MockDatabaseQuerierMockRecorder) AddOrUpdateHistory(ctx, url, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateHistory", reflect.TypeOf((*MockDatabaseQuerier)(nil).AddOrUpdateHistory), ctx, url, title)
}

// DeleteCertificateValidation mocks base method.
func (m *MockDatabaseQuerier) DeleteCertificateValidation(ctx context.Context, hostname, certificateHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateValidation", ctx, hostname, certificateHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateValidation indicates an expected call of DeleteCertificateValidation.
func (mr *MockDatabaseQuerierMockRecorder) DeleteCertificateValidation(ctx, hostname, certificateHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateValidation", reflect.TypeOf((*MockDatabaseQuerier)(nil).DeleteCertificateValidation), ctx, hostname, certificateHash)
}

// DeleteExpiredCertificateValidations mocks base method.
func (m *MockDatabaseQuerier) DeleteExpiredCertificateValidations(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredCertificateValidations", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredCertificateValidations indicates an expected call of DeleteExpiredCertificateValidations.
func (mr *MockDatabaseQuerierMockRecorder) DeleteExpiredCertificateValidations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredCertificateValidations", reflect.TypeOf((*MockDatabaseQuerier)(nil).DeleteExpiredCertificateValidations), ctx)
}

// DeleteHistory mocks base method.
func (m *MockDatabaseQuerier) DeleteHistory(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHistory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHistory indicates an expected call of DeleteHistory.
func (mr *MockDatabaseQuerierMockRecorder) DeleteHistory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistory", reflect.TypeOf((*MockDatabaseQuerier)(nil).DeleteHistory), ctx, id)
}

// DeleteZoomLevel mocks base method.
func (m *MockDatabaseQuerier) DeleteZoomLevel(ctx context.Context, domain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteZoomLevel", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteZoomLevel indicates an expected call of DeleteZoomLevel.
func (mr *MockDatabaseQuerierMockRecorder) DeleteZoomLevel(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteZoomLevel", reflect.TypeOf((*MockDatabaseQuerier)(nil).DeleteZoomLevel), ctx, domain)
}

// GetCertificateValidation mocks base method.
func (m *MockDatabaseQuerier) GetCertificateValidation(ctx context.Context, hostname, certificateHash string) (db.CertificateValidation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateValidation", ctx, hostname, certificateHash)
	ret0, _ := ret[0].(db.CertificateValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateValidation indicates an expected call of GetCertificateValidation.
func (mr *MockDatabaseQuerierMockRecorder) GetCertificateValidation(ctx, hostname, certificateHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateValidation", reflect.TypeOf((*MockDatabaseQuerier)(nil).GetCertificateValidation), ctx, hostname, certificateHash)
}

// GetCertificateValidationByHostname mocks base method.
func (m *MockDatabaseQuerier) GetCertificateValidationByHostname(ctx context.Context, hostname string) (db.CertificateValidation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateValidationByHostname", ctx, hostname)
	ret0, _ := ret[0].(db.CertificateValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateValidationByHostname indicates an expected call of GetCertificateValidationByHostname.
func (mr *MockDatabaseQuerierMockRecorder) GetCertificateValidationByHostname(ctx, hostname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateValidationByHostname", reflect.TypeOf((*MockDatabaseQuerier)(nil).GetCertificateValidationByHostname), ctx, hostname)
}

// GetHistory mocks base method.
func (m *MockDatabaseQuerier) GetHistory(ctx context.Context, limit int64) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", ctx, limit)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockDatabaseQuerierMockRecorder) GetHistory(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockDatabaseQuerier)(nil).GetHistory), ctx, limit)
}

// GetHistoryEntry mocks base method.
func (m *MockDatabaseQuerier) GetHistoryEntry(ctx context.Context, url string) (db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryEntry", ctx, url)
	ret0, _ := ret[0].(db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryEntry indicates an expected call of GetHistoryEntry.
func (mr *MockDatabaseQuerierMockRecorder) GetHistoryEntry(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryEntry", reflect.TypeOf((*MockDatabaseQuerier)(nil).GetHistoryEntry), ctx, url)
}

// GetHistoryWithOffset mocks base method.
func (m *MockDatabaseQuerier) GetHistoryWithOffset(ctx context.Context, limit, offset int64) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryWithOffset", ctx, limit, offset)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryWithOffset indicates an expected call of GetHistoryWithOffset.
func (mr *MockDatabaseQuerierMockRecorder) GetHistoryWithOffset(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryWithOffset", reflect.TypeOf((*MockDatabaseQuerier)(nil).GetHistoryWithOffset), ctx, limit, offset)
}

// GetZoomLevel mocks base method.
func (m *MockDatabaseQuerier) GetZoomLevel(ctx context.Context, domain string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoomLevel", ctx, domain)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoomLevel indicates an expected call of GetZoomLevel.
func (mr *MockDatabaseQuerierMockRecorder) GetZoomLevel(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoomLevel", reflect.TypeOf((*MockDatabaseQuerier)(nil).GetZoomLevel), ctx, domain)
}

// ListCertificateValidations mocks base method.
func (m *MockDatabaseQuerier) ListCertificateValidations(ctx context.Context) ([]db.CertificateValidation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificateValidations", ctx)
	ret0, _ := ret[0].([]db.CertificateValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateValidations indicates an expected call of ListCertificateValidations.
func (mr *MockDatabaseQuerierMockRecorder) ListCertificateValidations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateValidations", reflect.TypeOf((*MockDatabaseQuerier)(nil).ListCertificateValidations), ctx)
}

// ListZoomLevels mocks base method.
func (m *MockDatabaseQuerier) ListZoomLevels(ctx context.Context) ([]db.ZoomLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListZoomLevels", ctx)
	ret0, _ := ret[0].([]db.ZoomLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListZoomLevels indicates an expected call of ListZoomLevels.
func (mr *MockDatabaseQuerierMockRecorder) ListZoomLevels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListZoomLevels", reflect.TypeOf((*MockDatabaseQuerier)(nil).ListZoomLevels), ctx)
}

// SearchHistory mocks base method.
func (m *MockDatabaseQuerier) SearchHistory(ctx context.Context, column1, column2 sql.NullString, limit int64) ([]db.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchHistory", ctx, column1, column2, limit)
	ret0, _ := ret[0].([]db.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchHistory indicates an expected call of SearchHistory.
func (mr *MockDatabaseQuerierMockRecorder) SearchHistory(ctx, column1, column2, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchHistory", reflect.TypeOf((*MockDatabaseQuerier)(nil).SearchHistory), ctx, column1, column2, limit)
}

// SetZoomLevel mocks base method.
func (m *MockDatabaseQuerier) SetZoomLevel(ctx context.Context, domain string, zoomLevel float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetZoomLevel", ctx, domain, zoomLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetZoomLevel indicates an expected call of SetZoomLevel.
func (mr *MockDatabaseQuerierMockRecorder) SetZoomLevel(ctx, domain, zoomLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZoomLevel", reflect.TypeOf((*MockDatabaseQuerier)(nil).SetZoomLevel), ctx, domain, zoomLevel)
}

// StoreCertificateValidation mocks base method.
func (m *MockDatabaseQuerier) StoreCertificateValidation(ctx context.Context, hostname, certificateHash, userDecision string, expiresAt sql.NullTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCertificateValidation", ctx, hostname, certificateHash, userDecision, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCertificateValidation indicates an expected call of StoreCertificateValidation.
func (mr *MockDatabaseQuerierMockRecorder) StoreCertificateValidation(ctx, hostname, certificateHash, userDecision, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCertificateValidation", reflect.TypeOf((*MockDatabaseQuerier)(nil).StoreCertificateValidation), ctx, hostname, certificateHash, userDecision, expiresAt)
}

// UpdateHistoryFavicon mocks base method.
func (m *MockDatabaseQuerier) UpdateHistoryFavicon(ctx context.Context, faviconUrl sql.NullString, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHistoryFavicon", ctx, faviconUrl, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHistoryFavicon indicates an expected call of UpdateHistoryFavicon.
func (mr *MockDatabaseQuerierMockRecorder) UpdateHistoryFavicon(ctx, faviconUrl, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHistoryFavicon", reflect.TypeOf((*MockDatabaseQuerier)(nil).UpdateHistoryFavicon), ctx, faviconUrl, url)
}

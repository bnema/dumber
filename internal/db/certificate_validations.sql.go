// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: certificate_validations.sql

package db

import (
	"context"
	"database/sql"
)

const DeleteCertificateValidation = `-- name: DeleteCertificateValidation :exec
DELETE FROM certificate_validations 
WHERE hostname = ? AND certificate_hash = ?
`

func (q *Queries) DeleteCertificateValidation(ctx context.Context, hostname string, certificateHash string) error {
	_, err := q.db.ExecContext(ctx, DeleteCertificateValidation, hostname, certificateHash)
	return err
}

const DeleteExpiredCertificateValidations = `-- name: DeleteExpiredCertificateValidations :exec
DELETE FROM certificate_validations 
WHERE expires_at IS NOT NULL AND expires_at <= datetime('now')
`

func (q *Queries) DeleteExpiredCertificateValidations(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, DeleteExpiredCertificateValidations)
	return err
}

const GetCertificateValidation = `-- name: GetCertificateValidation :one
SELECT id, hostname, certificate_hash, user_decision, created_at, expires_at FROM certificate_validations 
WHERE hostname = ? AND certificate_hash = ? 
AND (expires_at IS NULL OR expires_at > datetime('now'))
LIMIT 1
`

func (q *Queries) GetCertificateValidation(ctx context.Context, hostname string, certificateHash string) (CertificateValidation, error) {
	row := q.db.QueryRowContext(ctx, GetCertificateValidation, hostname, certificateHash)
	var i CertificateValidation
	err := row.Scan(
		&i.ID,
		&i.Hostname,
		&i.CertificateHash,
		&i.UserDecision,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const StoreCertificateValidation = `-- name: StoreCertificateValidation :exec
INSERT OR REPLACE INTO certificate_validations (hostname, certificate_hash, user_decision, expires_at)
VALUES (?, ?, ?, ?)
`

func (q *Queries) StoreCertificateValidation(ctx context.Context, hostname string, certificateHash string, userDecision string, expiresAt sql.NullTime) error {
	_, err := q.db.ExecContext(ctx, StoreCertificateValidation,
		hostname,
		certificateHash,
		userDecision,
		expiresAt,
	)
	return err
}
